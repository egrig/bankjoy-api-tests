{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 2,
    "pending": 0,
    "failures": 5,
    "start": "2025-03-30T18:21:44.511Z",
    "end": "2025-03-30T18:21:47.410Z",
    "duration": 2899,
    "testsRegistered": 7,
    "passPercent": 28.57142857142857,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ad8e30e8-bf92-4ed5-8577-9595b6b73fe0",
      "title": "",
      "fullFile": "/Users/edward/Desktop/bankjoy-api-tests/test/forexTests.mjs",
      "file": "/test/forexTests.mjs",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5f139283-a631-4dd0-8ba8-0e1b30bf8876",
          "title": "Bank of Canada Forex API",
          "fullFile": "/Users/edward/Desktop/bankjoy-api-tests/test/forexTests.mjs",
          "file": "/test/forexTests.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fetch CAD to USD conversion rates for the last 10 weeks",
              "fullTitle": "Bank of Canada Forex API should fetch CAD to USD conversion rates for the last 10 weeks",
              "timedOut": false,
              "duration": 734,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await getForexRates(\"FXUSDCAD\");\nexpect(data).to.have.property(\"observations\").that.is.an(\"array\");\nexpect(data.observations).to.have.length.greaterThan(0);",
              "err": {},
              "uuid": "1c5d7309-dfc4-4724-a157-35d240a144a4",
              "parentUUID": "5f139283-a631-4dd0-8ba8-0e1b30bf8876",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail gracefully when requesting an invalid currency pair",
              "fullTitle": "Bank of Canada Forex API should fail gracefully when requesting an invalid currency pair",
              "timedOut": false,
              "duration": 214,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    await getForexRates(\"INVALID_PAIR\");\n} catch (error) {\n    expect(error.message).to.equal(\"API request failed.\");\n}",
              "err": {
                "message": "AssertionError: expected 'API request failed: Request failed wi…' to equal 'API request failed.'",
                "estack": "AssertionError: expected 'API request failed: Request failed wi…' to equal 'API request failed.'\n    at Context.<anonymous> (file:///Users/edward/Desktop/bankjoy-api-tests/test/forexTests.mjs:17:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- API request failed: Request failed with status code 404\n+ API request failed.\n"
              },
              "uuid": "9713db5b-7489-47f2-9435-78aba3cf68f1",
              "parentUUID": "5f139283-a631-4dd0-8ba8-0e1b30bf8876",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should calculate the average CAD to USD rate for the last 10 weeks",
              "fullTitle": "Bank of Canada Forex API should calculate the average CAD to USD rate for the last 10 weeks",
              "timedOut": false,
              "duration": 80,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const data = await getForexRates(\"FXUSDCAD\");\nconst avgRate = calculateAverageRate(data.observations, \"FXUSDCAD\");\nexpect(avgRate).to.be.a(\"number\"). that.is.greaterThan(0);",
              "err": {
                "message": "AssertionError: expected NaN to be above +0",
                "estack": "AssertionError: expected NaN to be above +0\n    at Context.<anonymous> (file:///Users/edward/Desktop/bankjoy-api-tests/test/forexTests.mjs:24:52)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- NaN\n+ 0\n"
              },
              "uuid": "cb757753-ac21-4ba9-a50e-3bb59ac233fd",
              "parentUUID": "5f139283-a631-4dd0-8ba8-0e1b30bf8876",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for an empty response",
              "fullTitle": "Bank of Canada Forex API should return an error for an empty response",
              "timedOut": false,
              "duration": 574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await getForexRates(\"\");\n} catch (error) {\n    expect(error.message).to.include(\"API request failed\");\n}",
              "err": {},
              "uuid": "5f7259fd-57eb-4d75-9d7c-173b0fbf915c",
              "parentUUID": "5f139283-a631-4dd0-8ba8-0e1b30bf8876",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch and calculate average for FXUSDCAD",
              "fullTitle": "Bank of Canada Forex API should fetch and calculate average for FXUSDCAD",
              "timedOut": false,
              "duration": 84,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const data = await getForexRates(pair);\nconst avgRate = calculateAverageRate(data.observations, pair);\nexpect(avgRate).to.be.a(\"number\").that.is.greaterThan(0);",
              "err": {
                "message": "AssertionError: expected NaN to be above +0",
                "estack": "AssertionError: expected NaN to be above +0\n    at Context.<anonymous> (file:///Users/edward/Desktop/bankjoy-api-tests/test/forexTests.mjs:41:55)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- NaN\n+ 0\n"
              },
              "uuid": "3036c486-abfb-4386-9ff7-4a0e9bebd6de",
              "parentUUID": "5f139283-a631-4dd0-8ba8-0e1b30bf8876",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch and calculate average for FXEURCAD",
              "fullTitle": "Bank of Canada Forex API should fetch and calculate average for FXEURCAD",
              "timedOut": false,
              "duration": 941,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const data = await getForexRates(pair);\nconst avgRate = calculateAverageRate(data.observations, pair);\nexpect(avgRate).to.be.a(\"number\").that.is.greaterThan(0);",
              "err": {
                "message": "AssertionError: expected NaN to be above +0",
                "estack": "AssertionError: expected NaN to be above +0\n    at Context.<anonymous> (file:///Users/edward/Desktop/bankjoy-api-tests/test/forexTests.mjs:41:55)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- NaN\n+ 0\n"
              },
              "uuid": "8a8a3116-ac83-4c3b-aaf3-f341a83addd1",
              "parentUUID": "5f139283-a631-4dd0-8ba8-0e1b30bf8876",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch and calculate average for FXGBPCAD",
              "fullTitle": "Bank of Canada Forex API should fetch and calculate average for FXGBPCAD",
              "timedOut": false,
              "duration": 262,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const data = await getForexRates(pair);\nconst avgRate = calculateAverageRate(data.observations, pair);\nexpect(avgRate).to.be.a(\"number\").that.is.greaterThan(0);",
              "err": {
                "message": "AssertionError: expected NaN to be above +0",
                "estack": "AssertionError: expected NaN to be above +0\n    at Context.<anonymous> (file:///Users/edward/Desktop/bankjoy-api-tests/test/forexTests.mjs:41:55)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- NaN\n+ 0\n"
              },
              "uuid": "bdc42e0c-8bfd-45e4-8ea7-abbf94b82b77",
              "parentUUID": "5f139283-a631-4dd0-8ba8-0e1b30bf8876",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c5d7309-dfc4-4724-a157-35d240a144a4",
            "5f7259fd-57eb-4d75-9d7c-173b0fbf915c"
          ],
          "failures": [
            "9713db5b-7489-47f2-9435-78aba3cf68f1",
            "cb757753-ac21-4ba9-a50e-3bb59ac233fd",
            "3036c486-abfb-4386-9ff7-4a0e9bebd6de",
            "8a8a3116-ac83-4c3b-aaf3-f341a83addd1",
            "bdc42e0c-8bfd-45e4-8ea7-abbf94b82b77"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2889,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}